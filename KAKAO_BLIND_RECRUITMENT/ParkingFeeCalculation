import java.util.*;

class Solution {
    private ArrayList<Car> cars = new ArrayList<>();
    ArrayList<Integer> cin = new ArrayList<>();
    
    public int[] solution(int[] fees, String[] records) {
        for(int i = 0; i < records.length; i++){
            StringTokenizer st = new StringTokenizer(records[i]);
            String time = st.nextToken();
            int minute = MinuteCalculator(time);
            
            int carNum = Integer.parseInt(st.nextToken());
            
            boolean isOut;
            if(st.nextToken().equals("IN")){
                isOut = false;
            }else{
                isOut = true;
            }
            
            int idx = AlreadyExist(carNum);
            if(idx==-1){
                cars.add(new Car(carNum, minute, isOut));
            }else{
                cars.get(idx).AddCar(minute, isOut);
            }
        }
        
        Collections.sort(cars);
        
        for(int i = 0; i<cars.size(); i++ ){
            int c = CalculatorFee(cars.get(i), fees);
            cin.add(c);
        }
        
        int[] answer = new int[cin.size()];
        for(int i = 0; i<cin.size(); i++){
            answer[i] = cin.get(i);
        }
        
        return answer;
    }
    public int AlreadyExist(int carNum){
        for(int i = 0; i<cars.size(); i++){
            if(cars.get(i).carNum == carNum){
                return i;
            }
        }
        return -1;
    }
    
    public int CalculatorFee(Car car, int[] fees){
        int resultTime = 0;
        boolean isIn = false;
        int inTime = 0;
        for(int i=0; i<car.isOutArray.size(); i++){
            if(car.isOutArray.get(i)){
                resultTime += car.time.get(i) - inTime;
            }else{
                inTime = car.time.get(i);
            }
            isIn = !isIn;
        }
        if(isIn){
            resultTime += 1439 - inTime;
        }
        
        return Fee(resultTime, fees);
    }
    
    public int Fee(int time, int[] fees){
        int resultFee;
        if(time<=fees[0]){
            return fees[1];
        }else{
            int exTime = time-fees[0];
            if(exTime%fees[2]==0){
                resultFee = (exTime/fees[2])*fees[3]+fees[1];
            }
            else{
                resultFee =  (exTime/fees[2]+1)*fees[3]+fees[1];
            }
        }
        return resultFee;
    }
    
    public int MinuteCalculator(String time){
        int minute;
        StringTokenizer st= new StringTokenizer(time, ":", false);
        minute = Integer.parseInt(st.nextToken())*60;
        minute += Integer.parseInt(st.nextToken());
        return minute;
    }
}
class Car implements Comparable<Car>{
    int carNum;
    ArrayList<Integer> time;
    ArrayList<Boolean> isOutArray;
    public Car(int carNum, int time, boolean isOut){
        this.time = new ArrayList<>();
        this.isOutArray = new ArrayList<>();
        this.carNum = carNum;
        this.time.add(time);
        this.isOutArray.add(isOut);
    }
    public void AddCar(int time, boolean isOut){
        this.time.add(time);
        this.isOutArray.add(isOut);
    }
    
    public int compareTo(Car c) {
        if (this.carNum < c.carNum) {
            return -1;
        } else if (this.carNum > c.carNum) {
            return 1;
        }
        return 0;
    }
}
